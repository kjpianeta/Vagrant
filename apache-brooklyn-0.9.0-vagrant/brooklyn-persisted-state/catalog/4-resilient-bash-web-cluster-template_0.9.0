<catalogItem>
  <brooklynVersion>0.9.0</brooklynVersion>
  <type>org.apache.brooklyn.core.catalog.internal.CatalogTemplateItemDto</type>
  <id>4-resilient-bash-web-cluster-template:0.9.0</id>
  <displayName>Template 4: Resilient Load-Balanced Bash Web Cluster with Sensors</displayName>
  <catalogItemId>4-resilient-bash-web-cluster-template:0.9.0</catalogItemId>
  <description>Sample YAML to provision a cluster of the bash/python web server nodes,
with sensors configured, and a load balancer pointing at them,
and resilience policies for node replacement and scaling
</description>
  <registeredTypeName>4-resilient-bash-web-cluster-template</registeredTypeName>
  <version>0.9.0</version>
  <planYaml>name: Resilient Load-Balanced Bash Web Cluster (Brooklyn Example)

# this final example shows some of the advanced functionality:
# defining custom sensors, and a cluster with a &quot;spec&quot;, 
# policies for resilience and scaling based on that sensor,
# and wiring a load balancer in front of the cluster

# combining this with the riak cluster in the previous example
# is left as a suggested exercise for the user

services:

# define a cluster of the web nodes
- type:           cluster
  name:           Cluster of Bash Web Nodes
  id:             my-web-cluster
  brooklyn.config:
    initialSize:  1
    memberSpec:
      $brooklyn:entitySpec:
        # template 2 is used as the spec for items in this cluster
        # with a new message overwriting the previous,
        # and a lot of sensors defined
        type:           2-bash-web-server-template
        name:           My Bash Web Server VM with Sensors
        # and clear the location defined there so it is taken from this template
        locations:      []
        
        brooklyn.config:
          my.message:   &quot;part of the cluster&quot;
        
        brooklyn.initializers:
        # make a simple request-count sensor, by counting the number of 200 responses in output.txt
        - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
          brooklyn.config:
            name: reqs.count
            targetType: int
            period: 5s
            command: &quot;cat output.txt | grep HTTP | grep 200 | wc | awk &apos;{print $1}&apos;&quot;
        # and publish the port as a sensor so the load-balancer can pick it up
        - type:           org.apache.brooklyn.core.sensor.StaticSensor
          brooklyn.config:
            name:         app.port
            targetType:   int
            static.value: $brooklyn:config(&quot;my.app.port&quot;)
        
        brooklyn.enrichers:
        # derive reqs.per_sec from reqs.count
        - type: org.apache.brooklyn.enricher.stock.YamlTimeWeightedDeltaEnricher
          brooklyn.config:
            enricher.sourceSensor: reqs.count
            enricher.targetSensor: reqs.per_sec
            enricher.delta.period: 1s
        # and take an average over 30s for reqs.per_sec into reqs.per_sec.windowed_30s
        - type: org.apache.brooklyn.enricher.stock.YamlRollingTimeWindowMeanEnricher
          brooklyn.config:
            enricher.sourceSensor: reqs.per_sec
            enricher.targetSensor: reqs.per_sec.windowed_30s
            enricher.window.duration: 30s
        
        # emit failure sensor if a failure connecting to the service is sustained for 30s
        - type: org.apache.brooklyn.policy.ha.ServiceFailureDetector
          brooklyn.config:
            entityFailed.stabilizationDelay: 30s
      
        brooklyn.policies:
        # restart if a failure is detected (with a max of one restart in 2m, sensor will propagate otherwise) 
        - type: org.apache.brooklyn.policy.ha.ServiceRestarter
          brooklyn.config:
            failOnRecurringFailuresInThisDuration: 2m
  
  # back at the cluster, create a total per-sec and some per-node average
  brooklyn.enrichers:
  - type: org.apache.brooklyn.enricher.stock.Aggregator
    brooklyn.config:
      enricher.sourceSensor: reqs.per_sec
      enricher.targetSensor: reqs.per_sec
      transformation: sum
  - type: org.apache.brooklyn.enricher.stock.Aggregator
    brooklyn.config:
      enricher.sourceSensor: reqs.per_sec
      enricher.targetSensor: reqs.per_sec.per_node
      transformation: average
  - type: org.apache.brooklyn.enricher.stock.Aggregator
    brooklyn.config:
      enricher.sourceSensor: reqs.per_sec.windowed_30s
      enricher.targetSensor: reqs.per_sec.windowed_30s.per_node
      transformation: average
        
  brooklyn.policies:
  # resilience: if a per-node restart policy fails,
  # just throw that node away and create a new one
  - type: org.apache.brooklyn.policy.ha.ServiceReplacer
  
  # and scale based on reqs/sec
  - type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy
    brooklyn.config:
      # scale based on reqs/sec (though in a real-world situation, 
      # reqs.per_sec.windowed_30s.per_node might be a better choice) 
      metric: reqs.per_sec.per_node
      
      # really low numbers, so you can trigger a scale-out just by hitting reload a lot
      metricUpperBound: 3
      metricLowerBound: 1
      
      # sustain 3 reqs/sec for 2s and it will scale out
      resizeUpStabilizationDelay: 2s
      # only scale down when sustained for 1m
      resizeDownStabilizationDelay: 1m

      maxPoolSize: 10
      
# and add a load-balancer pointing at the cluster
- type:           load-balancer
  id:             load-bal
  brooklyn.config:
    # point this load balancer at the cluster, specifying port to forward to
    loadbalancer.serverpool:  $brooklyn:entity(&quot;my-web-cluster&quot;)
    member.sensor.portNumber: app.port
    # disable sticky sessions to allow easy validation of balancing via browser refresh
    nginx.sticky: false

brooklyn.enrichers:
# publish a few useful info sensors and KPI&apos;s to the root of the app
- type: org.apache.brooklyn.enricher.stock.Propagator
  brooklyn.config:
    uniqueTag:    propagate-load-balancer-url
    producer:     $brooklyn:entity(&quot;load-bal&quot;)
    propagating:
    - main.uri
- type: org.apache.brooklyn.enricher.stock.Propagator
  brooklyn.config:
    uniqueTag:    propagate-reqs-per-sec
    producer:     $brooklyn:entity(&quot;my-web-cluster&quot;)
    propagating:
    - reqs.per_sec
    - reqs.per_sec.windowed_30s.per_node

location:
  jclouds:aws-ec2:
    # edit these (or delete if credentials specified in brooklyn.properties)      
    identity:     &lt;REPLACE&gt;
    credential:   &lt;REPLACE&gt;
    
    region:       eu-central-1
    minRam:       2gb
</planYaml>
  <libraries class="ImmutableList"/>
  <catalogItemType>TEMPLATE</catalogItemType>
  <catalogItemJavaType>org.apache.brooklyn.api.entity.Application</catalogItemJavaType>
  <specType>org.apache.brooklyn.api.entity.EntitySpec</specType>
  <deprecated>false</deprecated>
  <disabled>false</disabled>
</catalogItem>
